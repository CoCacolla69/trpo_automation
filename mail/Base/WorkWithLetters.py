# coding=utf-8
# from CommonClasses import User

def WorkWithLetters(letters):
    """Работа с письмами, формирование правильного формата данных,
    отправка их на проверку, принятие результатов и их передача дальше"""

    print("convertedLetters = LettersConvertToString(letters)")
    """
    Функционал:
    - Вытащить сырые данные по ссылкам из поля Body
    - Переконвертировать их в строковой формат и разместить в поле Body
    На входе: 
    - letter - заполненный и провалидированный список писем - экземпляров класса Letter
    На выходе:
    - convertedLetters - Список писем, в каждом из которых в поле Body лежит необходимая для отправки информация
    Что предусмотреть:
    - Для некоторых писем нужно вытаскивать данные, для какой-то достаточно ссылки. Предусмотреть проверку на это
    в соответствии со спецификацией по JSON  
    """

    print("jsonDates = FormJSONDates(convertedLetters)")
    """
    Функционал:
    - Сформировать список, хранящий экземпляры json с данными, необходимыми для отправки по каждой лабораторной
    На входе: 
    - convertedLetter - список писем - экземпляров класса Letter, в каждом из которых в поле Body лежит необходимая для 
    отправки информация
    На выходе:
    - jsonDates - список json с нужными данными и в нужном формате
    Что предусмотреть:
    - Формат json для каждой лабораторки прописан в спецификации по json, но по факту он везде одинаковый
    - Продумать момент обработки списка писем
    """

    # SendJSONForCheck - Отправить письма на проверку
    print("SendJSONForCheck(jsonDates)")
    """
    Функционал:
    - Отправить письма на проверку в модули проверки писем от ВТ
    - Дождаться проверки каждого из писем
    - Сформировать список экземпляров классов LetterResults по каждому письму, расставить оценки и комментарии от ВТ
    На входе: 
    - jsonDates - список с экземплярами json, с нужными данными в нужном формате 
    На выходе:
    - None
    Что предусмотреть:
    - Будет синхронный режим работы, когда сначала отправляется первый json потом происходит ожидание ответа на него, 
    после чего происходит заполнение нужных полей
    отправить json1 ->
    получить ответ на json1 ->
    Заполнить нужные поля в result1 ->
    отправить json3 ->
    получить ответ на json3 ->
    Заполнить нужные поля в result3 ->
    отправить json3 ->
    получить ответ на json3 ->
    Заполнить нужные поля в result3 ->
    ... 
    - Каждый json нужно отправить на нужный порт. Предусмотреть проверку на это в соответствии со спецификацией по JSON
    - Предусмотеть таймаут ожидания, чтобы система не зависала на бесконечное время при ошибках в модулях проверки
    В этом случае заполнять не только поле IsOK но и поле Code 
    """

    # SetResults - Передать данные следующему модулю в формате списка экземпляров класса EmailResults
    print("SetResults(emailResults)")

WorkWithLetters("")